// It's just a reference grammar for xFunc (The implementation is not completely equal to grammar).

statement = for
          / while
          / exp

def = ('assign') '(' variable ',' exp ')'
undef = ('unassign') '(' variable ')'
if = 'if' '(' conditional ',' exp (',' exp)* ')'
for = 'for' '(' statement ',' exp ',' conditional ',' statement ')'
while = 'while' '(' exp ',' conditional ')'

exp = assign / 
      ternary 

assign = variable (':=', '+=' / '-=' / '*=' / '/=' / '<<=' / '>>=') exp
ternary = conditional ('?' exp ':' exp)*

conditional = bitwise (('&&' / '||') bitwise)*
bitwise = equality (('&' / 'and' / '|' / 'or' / 'xor' / 'impl' / 'eq' / 'nor' / 'nand') equality)*
equality = shift (('==' / '!=' / '<' / '<=' / '>' / '>=') shift)*
shift = addSub (('<<' / '>>') addSub)*
addSub = mulDivMod (('+' / '-') mulDivMod)*
mulDivMod = mulImplicit (('*' / '/' / '%') mulImplicit)*
mulImplicit = mulImplicitLeftUnary / leftUnary
mulImplicitLeftUnary = '-'* number rightUnary
leftUnary = ('~' / '-')* exponentiation
exponentiation = rightUnary ('^' exponentiation)*
rightUnary = incDec
           / factorial
           / operand

incDec = variable ('++' / '--')
factorial = (number '!')

operand = complexnumber /
          if /
          def /
          undef /
          number /
          function /
          variable /
          boolean /
          bracketExp /
          callExp /
          lambda /
          matrix /
          vector

digitWithoutZero = [1-9]
digit = [0] / digitWithoutZero
letter = [a-z]

number = digitWithoutZero (digit)*
id = letter (digit / letter)*
variable = id
boolean = 'true' / 'false'

complexnumber = number '∠' number '°'

bracketExp = '(' exp ')'

function = id '(' parameters ')'
parameters = (statement (',' statement)*)*

vector = ('{' / '(') parameters ('}' / ')')
matrix = ('{' / '(') vector (',' vector) ('}' / ')')

functionDeclaration = id '(' (variable (',' variable)* / '') ')'

lambda = '(' (id (',' id) / '') ')' '=>' exp
callExp = '(' lambda ')' '(' parameters ')'